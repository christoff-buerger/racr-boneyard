/**
 * This program and the accompanying materials are made available under the
 * terms of the MIT license (X11 license) which accompanies this distribution.
 *
 * @author M. Tasić, C. Bürger
 */

import java.util.regex.*;

aspect NameAnalysis {
	
	/* Name analysis to find partial qualified declaration in subtree */
	
	private static Declaration ASTNode.subtreeLookup(ASTNode decl, String label) {
		Declaration match = null;
		if (decl instanceof ClassDeclaration) {
			for (Declaration d : ((ClassDeclaration)decl).getBodyList()) {
				match = d.lookup(label);
				if (match != null)
					return match;
			}
		} else {
			for (Declaration d : ((CompilationUnit)decl).getBodyList()) {
				match = d.lookup(label);
				if (match != null)
					return match;
			}
		}
		return null;
	}
	
	public static Declaration ASTNode.doLookup(ASTNode decl, String label) {
		String[] parts = new String[2];
		int dotindex = label.indexOf('.');
		if (dotindex == -1) {
			parts[0] = label;
			parts[1] = "";
		} else {
			parts[0] = label.substring(0, dotindex);
			parts[1] = label.substring(dotindex + 1);
		}
		
		Declaration localMatch = decl.localLookup(parts[0]);
		if (parts[1].equals(""))
			return localMatch;
		if (localMatch != null) {
			if (parts[0].equals("-1")) {
				Declaration match = decl.lookup(parts[1]);
				if (match != null)
					return match;
				return subtreeLookup(decl, label);
			}
			if (parts[0].equals("0"))
				return decl.lookup(parts[1]);
			if (parts[0].matches("[1-9][0-9]*")) {
				Declaration match = decl.lookup(parts[1]);
				if (match != null)
					return match;
				int num = Integer.parseInt(parts[0]) - 1;
				return subtreeLookup(decl, "" + num + "." + parts[1]);
			}
			return localMatch.lookup(parts[1]);
		}
		return null;
	}
	
	syn Declaration ASTNode.lookup(String label) = null; 
	syn Declaration CompilationUnit.lookup(String label) = doLookup(this, label);
	syn Declaration ClassDeclaration.lookup(String label) = doLookup(this, label);
	syn Declaration Declaration.lookup(String label) = null;
	
	/* Name analysis to find non-qualified direct declaration child */
	
	syn Declaration ASTNode.localLookup(String name) = null;
	
	syn Declaration CompilationUnit.localLookup(String label) {
		for (Declaration d : getBodyList())
			if (label.matches("-?[0-9]+") || label.equals("*") || label.equals(d.getName()))
			   return d;
		return null;
	}
	   
	syn Declaration ClassDeclaration.localLookup(String label) {
	   for(Declaration d : getBodyList())
		   if (label.matches("-?[0-9]+") || label.equals("*") || label.equals(d.getName()))
			   return d;
	   return null;
	}
	   
	syn Declaration MethodDeclaration.localLookup(String label) {
	   for (Declaration d : getParametersList())
		   if (label.matches("-?[0-9]+") || label.equals("*") || label.equals(d.getName()))
			   return d;
	   for (Statement d : getBodyList()){
		   if (d instanceof Declaration)
			   if (label.matches("-?[0-9]+") || label.equals("*") || label.equals(((Declaration)d).getName()))
				   return (Declaration)d;
	   }
	   return null;
	}
	   
	syn Declaration MethodDeclaration.localLookup(String label, int bound) {
	   for (Declaration d : getParametersList())
		   if (label.matches("-?[0-9]+") || label.equals("*") || label.equals(d.getName()))
			   return d;
	   for (int i = 0; i < bound; i++) {
		   Statement d = getBody(i);
		   if (d instanceof Declaration)
			   if (label.matches("-?[0-9]+") || label.equals("*") || label.equals(((Declaration)d).getName()))
				   return (Declaration)d;
	   }
	   return null;
	}
	
	/* Name analysis to find partial qualified reference */
	
	syn Declaration CompilationUnit.lookupRef(String refName) = lookup(refName);
	
	inh Declaration ClassDeclaration.lookupRef(String refName);
	inh Declaration MethodDeclaration.lookupRef(String refName);
	inh Declaration Reference.lookupRef(String refName);
	
	eq CompilationUnit.getBody(int i).lookupRef(String refName){
		Declaration match = getBody(i).lookup(refName);
		return (match != null) ? match : lookupRef(refName);
	}
	
	eq ClassDeclaration.getBody(int i).lookupRef(String refName){
		Declaration match = getBody(i).lookup(refName);
		return (match != null) ? match : lookupRef(refName);
	}
	
	eq MethodDeclaration.getBody(int i).lookupRef(String refName){
		Declaration match = (refName.indexOf('.') == -1) ? localLookup(refName, i) : null;
		return (match != null) ? match : lookupRef(refName);
	}
	
	/* Name analysis to find full qualified hook */
	
	syn Declaration BindComposer.Source() = CompilationUnit().lookup(sourceName());
	syn Declaration BindComposer.Target() = CompilationUnit().lookup(targetName());
}
